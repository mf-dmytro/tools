import requests
import logging

TOKEN="***"
HOST="https://circleci.com"
ORG="MarkForged"
PROJECTS = [
    # "Eiger",
    # "joseph-scripts",
    # "wim",
    # "CarbonSlicer",
    # "barracuda",
    # "olympus",
    # "iot",
    # "manufacturing",
    # "joseph-scripts",
    # "mf-cli",
    # "Gerbil",
    # "PrintTestSuites",
    # "yocto-config",
    # "eeparts",
    # "infra-automation",
    # "orders_sync",
    # "SageX3ERP",
    # "moray",
    # "kilauea",
    # "mf-commons",
    # "Khyber",
    # "os-image-assembly",
    # "event-specs",
    # "smartslice",
    # "RAT",
    # "data-pipeline",
    # "locale-json",
    # "devops-tf-kubernetes",
    # "mfpTranslator",
    # "wim-scripts",
    # "jira-connector",
    # "collin-scripts",
    # "periscope",
    # "Matterhorn",
    # "mesh_processing",
    # "doom",
    # "ubuntu-image",
    # "mf-vision",
    # "new-image-builder",
    # "bedrock",
    # "altium",
    # "facehugger",
    # "Aegean-Metal-Tuning",
    # "GOMP",
    # "skeleton-package",
    # "eiger-api-mcp",
    # "cloudflare-settings",
    # "markforged.github.io",
    # "carbonslicer-GHAS",
    # "cfius-data-scripts",
    # "pubsub-msg-specs",
    # "carbonslicer-GHAS-part-deux",
    # "mf-coffeelint",
    # "geo-constants",
    # "austin-scripts",
    # "olympusGHAS",
    # "iot-GHAS",
    # "Github-Project-PR-Metrics",
    # "coffeescript-ghas",
    # "eiger-mock-app",
    # "scripts",
    # "mf-ignition",
    # "smartslice-qa",
    # "device-docgen",
    # "TechDocs",
    # "firmware-builds",
    # "print-labels",
    # "arena",
    # "cdt2d",
    # "mf-mlops",
    # "devops-tf-kubernetes-auth",
    # "CSGHAS",
    # "devops-identity-center",
    # "wim-proxy",
    # "splot",
    # "k2-docs",
    # "devops-tf-harness",
    # "imt_scripts",
    # "prepreg-data",
    # "tectonic",
    # "saml-idp",
    # "TranslateBot2",
    # "px100-nozzle-check",
    # "is-migration-ready-yet",
    # "devops-tf-iam",
    # "devops-tf-policy-sentry",
    # "eslint-plugin",
    # "fust",
    # "flounder",
    # "Toolbox",
    # "k2-codepen",
    # "devops-circleci-runner-k8s",
    # "devops-ansible-playbook-matrix-team",
    # "devops-ansible-role-markforged-users",
    # "devops-ansible-playbook-bastion-cluster",
    # "devops-ansible-role-bastion-host",
    # "devops-tf-bastion-cluster",
    # "eslint-config",
    # "simple-state",
    # "mf-circleci-orb",
    # "AegeanCVPlayground",
    # "aws-lambda-nodejs-runtime-interface-client",
    # "data-scripts",
    # "iot-dotfiles",
    # "gha-test",
    # "bfj",
    # "devops-tf-jenkins-agent",
    # "devops-tf-rds-aurora",
    # "devops-tf-rds-lambda",
    # "TechOps",
    # "flame-chart-js",
    # "meta-rtl88x2CU",
    # "node-samlp",
    # "devops-jenkins",
    # "barracuda-mock-chrome-extension",
    # "sculpin",
    # "devops-tf-aws-config",
    # "k2-ui",
    # "k2-middleware",
    # "thor",
    # "devops-tf-cloudfront-redirect",
    # "devops-fluentd-logentries",
    # "devops-fluentd",
    # "internal-docs",
    # "hacky-stash",
    # "FLSU",
    # "mf-jira-orb",
    # "rat-harness",
    # "devops-tf-openvpn-cluster",
    # "test-eng",
    # "pino-pretty",
    # "wim-models",
    # "dozuki-tools",
    # "blackmagic",
    # "jira-orb",
    # "k2-lazrlog",
    # "MFEngTools",
    # "axios-cached-dns-resolve",
    # "security",
    # "meta-lts-lcd133",
    # "BeadWidthMetrologyInvestigation",
    # "mf-mulesoft-apis",
    # "UVPaperFigures",
    # "mf-mosquitto",
    # "devops-ansible-playbook-data-team",
    # "rs-markforged-shuttle",
    # "K2-test",
    # "vayu",
    # "agni",
    # "js-beautify",
    # "mf-pre-commit",
    # "prettier-config",
    # "SutterButtes",
    # "lambda-logger",
    # "io",
    # "InterleavedPathing",
    # "zztest-octopus-deploy",
    # "fun-with-rust",
    # "thorjs",
    # "http-synthetic-monitor",
    # "eediagrams",
    # "meta-markforged",
    # "JiraPython",
    # "devops-tf-newrelic",
    # "AegeanUMH",
    # "mati-zero-touch",
    # "command_center",
    # "turbo_fiber_composite_analysis",
    # "virtual-devices",
    # "devops-tf-newrelic-logs-lambda",
    # "RANSAC",
    # "devops-aws-alb-controller",
    # "atlantis-mockup",
    # "mocha-2",
    # "devops-tf-pagerduty-service",
    # "fx20-telemetry-classifier",
    # "harmonics",
    # "mfp-unpacking-summer-project",
    # "analytics-adhoc",
    # "nps",
    # "sortinghat",
    # "smartslice-aws-infra",
    # "tel-stream",
    # "coast-guard",
    # "devops-keychain-circle-test",
    # "devops-k8s-autoscaler",
    # "devops-sw-onboarding",
    # "pressureVis",
    # "devops-openvpn-cluster",
    # "ss-widget-prototype",
    # "devops-jenkins-lib",
    # "fun-with-elm",
    # "mocha",
    # "devops-webhook-dispatch",
    # "begui",
    # "pywim",
    # "devops-karpenter",
    # "py3mf",
    # "mkfg3d-child",
    # "DaveRATTesting",
    # "rs-http-proxy",
    # "plunder",
    # "montblonc",
    # "refurbshop",
    # "devops-tf-newrelic-metric-stream",
    # "devops-keda",
    # "DroolsOSA",
    # "laser-processing",
    # "git-demo",
    # "eslint-plugin-jasmine",
    # "eslint-plugin-jasmine-fork",
    # "android-app",
    # "three.js",
    # "piezo",
    # "product-land",
    # "webpack-plugin",
    # "devops-ansible-playbook-jenkins-worker",
    # "devops-webhook-gateway",
    # "devops-interview",
    # "devops-tf-ansible-user-init",
    # "device-proxy",
    # "devops-ansible-role-os-hardening",
    # "devops-ansible-role-openvpn-as",
    # "devops-ansible-role-docker",
    # "devops-ansible-playbook-mf-base",
    # "garden-eel",
    # "devops-img",
    # "robust-laplacians-py",
    # "yocto-manifest",
    # "device-log-parser",
    # "stl-match-external",
    # "values_1-hackathon",
    # "devops-s3-proxy",
    # "devops-cloudfront-ip-updater",
    # "potpourri3d",
    # "prettier",
    # "nps-task-provider",
    # "abstract-features",
    # "mfg-data-scripts",
    # "CloudSlicing",
    # "node-jspack",
    # "Typescript-Coffeescript-Test-Repo",
    # "ConsumableTracker",
    # "python_generic_template",
    # "react2angular",
    # "scan-viz",
    # "gopgp",
    # "minimal_wasm",
    # "CClipper",
    # "WASMClipper",
    # "design-system",
    # "brick-breaker",
    # "print-combinator",
    # "dma-token",
    # "ignition-consumables",
    # "eiger-sdk",
    # "iot-quickstart",
    # "phytec-vagrant",
    # "phytec-setup",
    # "javascript-obfuscator",
    # "timeseries-sql-test",
    # "image-builder",
    # "mf-woocommerce",
    # "design-storybook",
    # "mock-knex",
    # "helios",
    # "ansible-openvpn",
    # "atlassian-ansible",
    # "chr-shipping-method",
    # "diamond",
    # "coffeelint-always-use-strict",
    # "splot-native",
    # "markforged-com-cloudfront",
    # "rds-slack-notify",
    # "furnace-fleet-filtering",
    # "markforged.com",
    # "gomp-temp",
    # "mThree.js",
    # "autodeploy",
    # "coffeelint-no-implicit-returns",
    # "coffeelint-forbidden-keywords",
    # "coffeeforged",
    # "translatebot",
    # "sponge",
    # "yakbuild-private",
    # "wifi-drivers",
    # "mussel",
    # "rhine-controller",
    # "bootloader-builder",
    # "bb-kernel",
    # "node-serialport-bindings",
    # "types-serialport",
    # "libarchivejs-test",
    # "serialport-benchmarking",
    # "mf-woo-tools",
    # "matterhorn-build",
    # "three-mesh-bvh",
    # "typescript-bootcamp",
    # "log-jammin",
    # "Hoover",
    # "internalTools",
    # "enums",
    # "cals_docs",
    # "snowflake-poc",
    # "heartbeatLogParsing",
    # "jsPack",
    # "FurnaceScripture",
    # "mf-mixer",
    # "random",
    # "four.js",
    # "coffeelint-no-implicit-returns-2",
    # "tgaPeakFitting",
    # "new-bootloader-builder",
    # "sqlstring",
    # "colonel",
    # "Sawyer",
    # "mf-logger",
    # "electron-store",
    # "laser-visualizer",
    # "mf-avatax",
    # "bookshelf",
    # "enterprise-plan",
    # "tectonics",
    # "devops",
    # "coffeelint-brunch",
    # "grunt-coffeelint",
    # "PhotonSocket",
    # "binary-search-bounds",
    # "robust-in-sphere",
    # "robust-orientation",
    # "multi-tenant-todo",
    # "pg-migrator",
    # "distance-transform",
    # "webdriverio",
    # "jade-ngtemplates-brunch",
    # "spacejam_utils",
    # "Rhine",
    # "iot-performance",
    # "Vesuvius",
    # "auth0-dev",
    # "websync",
    # "test_repo",
    # "mf-woo-exact",
    # "Cosmodrome",
    # "webkit-builders",
    # "edward",
    # "invoice-importer",
    # "chromium.src-private",
    # "tar-stream",
    # "process-comm",
    # "ISMS",
    # "sync-exec",
    # "nw.js-private",
    # "GcodeInterview",
    # "TechnicalDocumentation",
    # "connman",
    # "alps_5206_test_suite",
    # "circleci-testing",
    # "svg_to_stl",
    # "cloud-render",
    # "electron-eiger",
    # "sequelize-handlers",
    # "zendeskExport",
    # "mf-dips",
    # "atob",
    # "mf-ipc",
    # "access-tracker",
    # "api-test",
    # "zendeskBot",
    # "RAT-test",
    # "git2jira",
    # "test-mf-matterhorn",
    # "test-mf-iot-common",
    # "test-mf-common",
    # "mf-woocommerce-zapier",
    # "underforged",
    # "api-expert",
    # "devops-expert",
    # "qa-expert",
    # "picchu",
    # "markforged.com-old",
    # "jiragit",
    # "metric",
    # "Markforged",
    # "vesuvius-omap-image-builder",
    # "downtime_caller",
    # "wfsync",
    # "markforged.com-full",
    # "vesuvius-colonel",
    # "vesuvius-bootloader-builder",
    # "print-time-estimator",
    # "vesuvius-debian-updates",
    # "Augur",
    # "cs-reseller-enablement",
    # "mercurius",
    # "jirabot",
    # "rutan",
    # "mfdrecord",
    # "pregistration",
    # "pressure-measurement",
    # "smart-shim",
    # "grunt-s3",
    # "Support-Documentation",
    # "Support-Tasks",
    # "simulavr",
    # "sendgrid-stub",
    # "matterhorn-updater",
    # "yoda",
    # "excelerometer",
    # "harp",
    # "Sisyphus",
    # "Case-Study",
    # "markforged-github-io-2014",
    "grunt-coffee-requires",
    "node-s3g",
    "Placer",
    "armhf-node-webkit",
]

def send_request(method, url, data=None):
    url = f"{HOST}/{url}"
    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "Circle-Token": TOKEN
    }
    if method == "GET":
        response = requests.get(url, headers=headers)
    elif method == "POST":
        response = requests.post(url, headers=headers, json=data)
    elif method == "DELETE":
        response = requests.delete(url, headers=headers)
    else:
        raise Exception(f"Unsupported method {method}")

    if response.status_code in [200, 201]:
        return response.json()
    else:
        raise Exception(f"Fail to send request f{method} f{url}. Code: {response.status_code}")


def get_project(project_name):
    return send_request("GET", f"api/v2/project/github/{ORG}/{project_name}")

def project_is_configured(project_name):
    response = send_request("GET", f"api/v1.1/project/github/{ORG}/{project_name}/settings")
    return True if response["branches"] else False

def migrate_project(project):
    integrations = send_request("GET", f"api/v2/projects/{project["id"]}/pipeline-definitions")["items"]
    if len(integrations) == 0:
        logger.info("  No integrations found, skipping...")
        return
    if len([i for i in integrations if i["config_source"]["provider"] == "github_app"]) > 0:
        logger.info("  GH App integration found, skipping...")
        return
    integration = next(i for i in integrations if i["config_source"]["provider"] == "github_oauth")
    trigger = send_request("GET", f"api/v2/projects/{project["id"]}/pipeline-definitions/{integration['id']}/triggers")["items"][0]
    repo_id = trigger["event_source"]["repo"]["external_id"]
    if trigger["event_preset"] in ["only-build-prs", "all-pushes"]:
        # create GH App integration
        gha_integration = send_request(
            method = "POST",
            url = f"api/v2/projects/{project["id"]}/pipeline-definitions",
            data = {
                "name": integration["name"],
                "checkout_source":{"provider":"github_app","repo":{"external_id":f"{repo_id}"}},
                "config_source":{"provider":"github_app","repo":{"external_id":f"{repo_id}"},"file_path": f"{integration["config_source"]["file_path"]}"}
            }
        )
        logger.info("  Created GH App integration")
        # create trigger
        send_request(
            method="POST",
            url=f"api/v2/projects/{project["id"]}/pipeline-definitions/{gha_integration["id"]}/triggers",
            data={
                "event_source":{"provider":"github_app","repo":{"external_id":f"{repo_id}"}},
                "event_preset": trigger["event_preset"],
                "disabled":False
            }
        )
        logger.info("  Created GH App trigger")
        # delete of OAuth trigger
        send_request("DELETE", f"api/v2/projects/{project["id"]}/triggers/{trigger["id"]}")
        logger.info("  Deleted old GH OAuth trigger")
        # add deply SSH keys
        send_request("POST", f"api/v1.1/project/github/{ORG}/{project["name"]}/checkout-key", data={"type":"deploy-key"})
        logger.info("  Deploy key added")

    else:
        raise Exception("Trigger event preset is not 'only-build-prs', skipping...")



logger = logging.getLogger("my_logger")
logger.setLevel(logging.DEBUG)
file_handler = logging.FileHandler("output.log") # File handler (writes to file)
file_handler.setLevel(logging.DEBUG)
console_handler = logging.StreamHandler() # Console handler (prints to console)
console_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)
console_handler.setFormatter(formatter)
logger.addHandler(file_handler)
logger.addHandler(console_handler)
logger.info("----------- script started -----------")
for project_name in PROJECTS:
    project = get_project(project_name)
    is_configured = project_is_configured(project["name"])
    logger.info(f"{project['name']} {'[SKIPPED]' if not is_configured else ''}")
    if is_configured:
        migrate_project(project)
